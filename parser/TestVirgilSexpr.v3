def main(args: Array<string>) {
    if (args.length < 1) {
        System.puts("Usage: VirgilSexpr <filename>\n");
        return;
    }

    def filename = args[0];
    def file_bytes = System.fileLoad(filename);
    if (file_bytes == null) {
        System.puts("Error reading ");
        System.puts(filename);
        System.ln();
        return;
    }

    // Parse the file into an S-expression
    def parser = SExprParser.new(filename, file_bytes);
    def sexp_res = parser.readSExpr();
    
    match (sexp_res) {
        Success(sexp) => {
            // Print the original S-expression
            System.puts("Original S-expression:\n");
            def sexp_buf = StringBuilder.new();
            sexp.buildString(sexp_buf);
            System.puts(sexp_buf.toString());
            System.ln();
            System.ln();
            
            // Convert to VirgilStmt
            def stmt_res = VirgilStmts.from_sexpr(sexp);
            match (stmt_res) {
                Success(stmt) => {
                    // Print the VirgilStmt as Virgil code
                    System.puts("Converted to Virgil code:\n");
                    System.puts(stmt.toString());
                    System.ln();
                }
                TODO => {
                    System.puts("TODO: Not implemented yet.\n");
                }
                Malformed(sexpr) => {
                    System.puts("Error: Malformed S-expression for Virgil statement:\n");
                    def sexp_buf = StringBuilder.new();
                    sexpr.buildString(sexp_buf);
                    System.puts(sexp_buf.toString());
                    System.ln();
                }
                ParserBug => {
                    System.puts("Error: Parser Bug\n");
                }
            }
        }
        _ => {
            System.puts("Error parsing S-expression\n");
        }
    }
}
