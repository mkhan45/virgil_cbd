def quote: byte = 0x22;

def cleanIdent(s: string) -> string {
    if (s.length < 2) return s;

    if (s[s.length - 1] == ':') {
        s = Arrays.range(s, 0, s.length - 1);
    }
    
    // Check for double quotes
    if (s[0] == quote && s[s.length - 1] == quote) {
        return Arrays.range(s, 1, s.length - 1);
    }
    
    // Check for single quotes
    if (s[0] == '\'' && s[s.length - 1] == '\'') {
        return Arrays.range(s, 1, s.length - 1);
    }
    
    return s;
}


type MatchCase {
    case Variant(variant_tag: string, expr: VirgilExpr);
    case Constant(test_expr: VirgilExpr, body_expr: VirgilExpr);
    
    def buildString(buf: StringBuilder) {
        match (this) {
            Variant(tag, expr) => {
                buf.puts(tag);
                buf.puts(" => ");
                expr.buildString(buf);
            }
            Constant(test, body) => {
                test.buildString(buf);
                buf.puts(" => ");
                body.buildString(buf);
            }
        }
    }
    
    def toString() -> string {
        def buf = StringBuilder.new();
        buildString(buf);
        return buf.toString();
    }
}

type SExprRes<T> {
    case Success(res: T);
    case TODO;
    case Malformed(sexpr: SExpr);
    case ParserBug;
    
    // Cast method to convert error types between different SExprRes types
    def castError<U>() -> SExprRes<U> {
        match (this) {
            Success(_) => return SExprRes.ParserBug;
            TODO => return SExprRes.TODO;
            Malformed(sexpr) => return SExprRes.Malformed(sexpr);
            ParserBug => return SExprRes.ParserBug;
        }
    }

    def isSuccess() -> bool {
        match (this) {
            Success(_) => return true;
            _ => return false;
        }
    }

    def orDefault(default: T) -> T {
        match (this) {
            Success(s) => return s;
            _ => return default;
        }
    }
}

type VirgilStmt {
    case Block(stmts: Array<VirgilStmt>);
    case Expr(expr: VirgilExpr);
    case Return(expr: VirgilExpr);
    case Local(var_name: string, expr: VirgilExpr, sidetable: bool); // TODO: add type
    case Match(subj: VirgilExpr, branches: Array<MatchCase>);
    case If(cond: VirgilExpr, then_stmt: VirgilStmt, else_stmt: VirgilStmt);
    case Injected(s: string);
    
    def buildString(buf: StringBuilder) {
        buildStringIndented(buf, 0);
    }
    
    def buildStringIndented(buf: StringBuilder, indent: int) {
        // Add indentation
        for (i = 0; i < indent; i++) buf.putc(' ');
        
        match (this) {
            Block(stmts) => {
                buf.puts("{\n");
                for (i = 0; i < stmts.length; i++) {
                    stmts[i].buildStringIndented(buf, indent + 2);
                    buf.putc('\n');
                }
                for (i = 0; i < indent; i++) buf.putc(' ');
                buf.putc('}');
            }
            Expr(expr) => {
                expr.buildString(buf);
                buf.putc(';');
            }
            Return(expr) => {
                buf.puts("return ");
                expr.buildString(buf);
                buf.putc(';');
            }
            Local(var_name, expr, sidetable) => {
                buf.puts("var ");
                buf.puts(var_name);
                buf.puts(" = ");
                expr.buildString(buf);
                buf.putc(';');
            }
            Match(subj, branches) => {
                buf.puts("match (");
                subj.buildString(buf);
                buf.puts(") {\n");
                
                for (i = 0; i < branches.length; i++) {
                    for (j = 0; j < indent + 2; j++) buf.putc(' ');
                    
                    match (branches[i]) {
                        Variant(tag, expr) => {
                            buf.puts(tag);
                            buf.puts(" => ");
                            expr.buildString(buf);
                        }
                        Constant(test, body) => {
                            test.buildString(buf);
                            buf.puts(" => ");
                            body.buildString(buf);
                        }
                    }
                    
                    buf.putc('\n');
                }
                
                for (i = 0; i < indent; i++) buf.putc(' ');
                buf.putc('}');
            }
            If(cond, then_stmt, else_stmt) => {
                buf.puts("if (");
                cond.buildString(buf);
                buf.puts(") ");
                
                // Check if then_stmt is a Block
                match (then_stmt) {
                    Block(_) => then_stmt.buildStringIndented(buf, 0);
                    _ => {
                        buf.putc('\n');
                        then_stmt.buildStringIndented(buf, indent + 2);
                    }
                }
                
                // Check if there's a non-empty else block
                match (else_stmt) {
                    Block(stmts) => {
                        if (stmts.length > 0) {
                            buf.puts(" else ");
                            else_stmt.buildStringIndented(buf, 0);
                        }
                    }
                    _ => {
                        buf.puts(" else ");
                        match (else_stmt) {
                            If(_, _, _) => else_stmt.buildStringIndented(buf, 0);
                            _ => {
                                buf.putc('\n');
                                else_stmt.buildStringIndented(buf, indent + 2);
                            }
                        }
                    }
                }
            }
	    Injected(s) => {
                buf.puts(s);
	    }
        }
    }

    def appendStmt(stmt: VirgilStmt) -> VirgilStmt {
        var left_stmts: Array<VirgilStmt>;
        match (this) {
            Block(ss) => left_stmts = ss;
            _ => left_stmts = [this];
        }

        var right_stmts: Array<VirgilStmt>;
        match (stmt) {
            Block(ss) => right_stmts = ss;
            _ => right_stmts = [stmt];
        }

        return VirgilStmt.Block(Arrays.concat(left_stmts, right_stmts));
    }

    def flatten() -> VirgilStmt {
	match (this) {
	    Block(ss) => {
	        var acc = Vector<VirgilStmt>.new();;
		for (s in ss) {
		    match (s) {
		        Block(sss) => acc.puta(sss); // only flatten one level
			_ => acc.put(s);
		    }
		}
		return VirgilStmt.Block(acc.copy());
	    }
	    _ => return this;
	}
    }

    def substTy(old: string, knew: string) -> VirgilStmt {
	match (this) {
	    Block(ss) => return VirgilStmt.Block(Arrays.map(ss, VirgilStmt.substTy(_, old, knew)));
	    Expr(e) => return VirgilStmt.Expr(e.substTy(old, knew));
	    Return(e) => return VirgilStmt.Return(e.substTy(old, knew));
	    Local(v, e, s) => return VirgilStmt.Local(v, e.substTy(old, knew), s);
	    Match(s, b) => return this; // TODO
	    If(c, t, e) => return VirgilStmt.If(c.substTy(old, knew), t.substTy(old, knew), e.substTy(old, knew));
	    Injected(s) => return this;
	}
    }
    
    def toString() -> string {
        def buf = StringBuilder.new();
        buildString(buf);
        return buf.toString();
    }
}

component VirgilStmts {
    def from_sexpr(sexpr: SExpr) -> SExprRes<VirgilStmt> {
        match (sexpr) {
            Atom(_) => return SExprRes.Malformed(sexpr);
            List(elems) => match (elems.head) {
                List(_) => return SExprRes.Malformed(sexpr);
                Atom(tag) => {
                    if (Strings.equal("BlockStmt", tag)) return parse_block_stmt(sexpr);
                    if (Strings.equal("ExprStmt", tag)) return parse_expr_stmt(sexpr);
                    if (Strings.equal("IfStmt", tag)) return parse_if_stmt(sexpr);
                    if (Strings.equal("ReturnStmt", tag)) return parse_return_stmt(sexpr);
                    if (Strings.equal("LocalStmt", tag)) return parse_local_stmt(sexpr);
                    else return SExprRes.Malformed(sexpr);
                }
            }
        }
    }

    def parse_block_stmt(sexpr: SExpr) -> SExprRes<VirgilStmt> {
        // format: (BlockStmt (stmt*))
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("BlockStmt")) return SExprRes.ParserBug;
        
        // Get the statements list
        def stmts = elems.tail;
        if (stmts == null) return SExprRes.Malformed(sexpr);
        
        // Create an array to hold the statements
        def stmts_arr = Array<VirgilStmt>.new(Lists.length(stmts));
        
        // Parse each statement
        var i = 0;
        for (n = stmts; n != null; n = n.tail) {
            def stmt_res = VirgilStmts.from_sexpr(n.head);
            match (stmt_res) {
                Success(s) => stmts_arr[i] = s;
                _ => return stmt_res.castError();
            }
            i++;
        }
        
        return SExprRes.Success(VirgilStmt.Block(stmts_arr));
    }
    
    def parse_expr_stmt(sexpr: SExpr) -> SExprRes<VirgilStmt> {
        // format: (ExprStmt (expr))
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("ExprStmt")) return SExprRes.ParserBug;
        
        // Get the expression
        if (elems.tail == null) return SExprRes.Malformed(sexpr);
        
        // Parse the expression
        def expr_res = VirgilExprs.from_sexpr(elems.tail.head);
        match (expr_res) {
            Success(expr) => return SExprRes.Success(VirgilStmt.Expr(expr));
            _ => return expr_res.castError();
        }
    }
    
    def parse_if_stmt(sexpr: SExpr) -> SExprRes<VirgilStmt> {
        // format: (IfStmt (cond_expr) (then_stmt) (else_stmt)?)
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("IfStmt")) return SExprRes.ParserBug;
        
        // Need at least condition and then-statement
        if (elems.tail == null || elems.tail.tail == null) return SExprRes.Malformed(sexpr);
        
        // Parse condition expression
        def cond_res = VirgilExprs.from_sexpr(elems.tail.head);
        if (!cond_res.isSuccess()) return cond_res.castError();
        def cond = cond_res.orDefault(VirgilExpr.Literal("", ""));
        
        // Parse then-statement
        def then_res = VirgilStmts.from_sexpr(elems.tail.tail.head);
        if (!then_res.isSuccess()) return then_res.castError();
        def then_stmt = then_res.orDefault(VirgilStmt.Block(Array.new(0)));
        
        // Parse optional else-statement or use empty block
        var else_stmt: VirgilStmt;
        if (elems.tail.tail.tail != null) {
            def else_res = VirgilStmts.from_sexpr(elems.tail.tail.tail.head);
            if (!else_res.isSuccess()) return else_res.castError();
            else_stmt = else_res.orDefault(VirgilStmt.Block(Array.new(0)));
        } else {
            // Default to empty block statement
            else_stmt = VirgilStmt.Block(Array<VirgilStmt>.new(0));
        }
        
        return SExprRes.Success(VirgilStmt.If(cond, then_stmt, else_stmt));
    }
    
    def parse_return_stmt(sexpr: SExpr) -> SExprRes<VirgilStmt> {
        // format: (ReturnStmt (expr))
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("ReturnStmt")) return SExprRes.ParserBug;
        
        // Need return expression
        if (elems.tail == null) return SExprRes.Malformed(sexpr);
        
        // Parse the expression
        def expr_res = VirgilExprs.from_sexpr(elems.tail.head);
        match (expr_res) {
            Success(expr) => return SExprRes.Success(VirgilStmt.Return(expr));
            _ => return expr_res.castError();
        }
    }
    
    def parse_local_stmt(sexpr: SExpr) -> SExprRes<VirgilStmt> {
        // format: (LocalStmt ("name" (type ...) (expr)))
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("LocalStmt")) return SExprRes.ParserBug;
        
	// TODO: refactor to munch decl
        def decl = elems.tail.head.forceList();
        if (decl == null) return SExprRes.Malformed(sexpr);
        
        def var_name = cleanIdent(decl.head.forceAtom());
        if (var_name == null) return SExprRes.Malformed(sexpr);
        
        // Verify type information
        if (decl.tail == null) return SExprRes.Malformed(sexpr);
        def type_ls = decl.tail.head.forceList();
        if (type_ls == null || !type_ls.head.matchesAtom("type")) return SExprRes.Malformed(sexpr);

        if (decl.tail.tail == null) return SExprRes.Malformed(sexpr);

	var sidetable = false;
	var expr_res: SExprRes<VirgilExpr> = SExprRes.ParserBug;

	def rephint_ls = decl.tail.tail.head.forceList();
	if (rephint_ls != null && rephint_ls.head.matchesAtom("repHints")) {
	    sidetable = true;
	    if (decl.tail.tail.tail == null) return SExprRes.Malformed(sexpr);
	    expr_res = VirgilExprs.from_sexpr(decl.tail.tail.tail.head);
	} else {
	    expr_res = VirgilExprs.from_sexpr(decl.tail.tail.head);
	}
        
        match (expr_res) {
            Success(expr) => return SExprRes.Success(VirgilStmt.Local(cleanIdent(var_name), expr, sidetable));
            _ => return expr_res.castError();
        }
    }
}

type VirgilExpr {
    case AppExpr(fn: string, args: Array<VirgilExpr>);
    case BinOpExpr(op: string, left: VirgilExpr, right: VirgilExpr);
    case Literal(tipe: string, string_rep: string);
    case VarExpr(var_name: string);
    case IfExpr(cond: VirgilExpr, then_expr: VirgilExpr, else_expr: VirgilExpr);
    
    def buildString(buf: StringBuilder) {
        match (this) {
            AppExpr(fn, args) => {
                buf.puts(fn);
                buf.putc('(');
                for (i = 0; i < args.length; i++) {
                    if (i > 0) buf.puts(", ");
                    args[i].buildString(buf);
                }
                buf.putc(')');
            }
            BinOpExpr(op, left, right) => {
                buf.putc('(');
                left.buildString(buf);
                buf.puts(" ");
                buf.puts(op);
                buf.puts(" ");
                right.buildString(buf);
                buf.putc(')');
            }
            Literal(tipe, string_rep) => {
                buf.puts(string_rep);
                //if (!Strings.equal(tipe, "unknown")) {
                //    buf.putc(':');
                //    buf.puts(tipe);
                //}
            }
            VarExpr(var_name) => buf.puts(var_name);
            IfExpr(cond, then_expr, else_expr) => {
                buf.puts("if (");
                cond.buildString(buf);
                buf.puts(") ");
                then_expr.buildString(buf);
                buf.puts(" else ");
                else_expr.buildString(buf);
            }
        }
    }

    def substTy(old: string, knew: string) -> VirgilExpr {
        match (this) {
            AppExpr(fn, args) => {
		// check if this is an app of an operator like i32.+(...)
	        def spl = Strings.splitOnChar(fn, byte.==(_, '.'), 1);
		if (spl.length == 2 && Strings.equal(spl[0], old)) {
		    def ty = spl[0];
		    var op = spl[1];
		    op = if (Strings.equal(op, "+"), "plus", op);
		    op = if (Strings.equal(op, "-"), "minus", op);
		    def fn_builder = StringBuilder.new();
    		    fn_builder.puts(knew);
        	    fn_builder.puts(".");
                    fn_builder.puts(op);
		    return VirgilExpr.AppExpr(fn_builder.toString(), Arrays.map(args, VirgilExpr.substTy(_, old, knew)));
		} else {
		    return VirgilExpr.AppExpr(fn, Arrays.map(args, VirgilExpr.substTy(_, old, knew)));
		}
	    }
            BinOpExpr(op, l, r) => return VirgilExpr.BinOpExpr(op, l.substTy(old, knew), r.substTy(old, knew));
            Literal(t, s) => return if(Strings.equal(t, old), VirgilExpr.Literal(knew, s), this);
	    VarExpr(e) => return this;
	    IfExpr(c, t, e) => 
		    return VirgilExpr.IfExpr(c.substTy(old, knew), t.substTy(old, knew), e.substTy(old, knew));
        }
    }
    
    def toString() -> string {
        def buf = StringBuilder.new();
        buildString(buf);
        return buf.toString();
    }
}

component VirgilExprs {
    def from_sexpr(sexpr: SExpr) -> SExprRes<VirgilExpr> {
        match (sexpr) {
            Atom(_) => return SExprRes.Malformed(sexpr);
            List(elems) => match (elems.head) {
                List(_) => return SExprRes.Malformed(sexpr);
                Atom(tag) => {
                    if (Strings.equal("AppExpr", tag)) return parse_app_expr(sexpr);
                    if (Strings.equal("BinOpExpr", tag)) return parse_binop_expr(sexpr);
                    if (Strings.equal("Literal", tag) || Strings.startsWith("StringExpr", tag)) return parse_literal(sexpr);
                    if (Strings.equal("IfExpr", tag)) return parse_if_expr(sexpr);
                    if (Strings.startsWith(tag, "VarExpr")) return parse_var_expr(sexpr);
                    return SExprRes.Malformed(sexpr);
                }
            }
        }
    }

    def parse_type(sexpr: SExpr) -> SExprRes<string> {
        def sexpr_ls = sexpr.forceList();
        if (sexpr_ls == null) return SExprRes.ParserBug;

        if (!sexpr_ls.head.matchesAtom("type")) return SExprRes.ParserBug;
        def sb = StringBuilder.new();
        for (n = sexpr_ls.tail; n != null; n = n.tail) {
            match (n.head) {
                Atom(type_component) => sb.puts(type_component);
                _ => return SExprRes.Malformed(sexpr);
            }
        }
        
        return SExprRes.Success(sb.toString());
    }

    def parse_app_expr(sexpr: SExpr) -> SExprRes<VirgilExpr> {
        // (AppExpr "func" (type ...) (args)*)
        // || (AppExpr (type ...) (VarExpr[Inst] "method" (type ...) (VarExpr[Type] "class" (type ...))) (args)*)
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("AppExpr")) return SExprRes.ParserBug;

        // second elem is either a function name or a type, in which case it's a method application of the form <type>.method(args)
        var func_name: string;
        var args: List<SExpr>;
        match (elems.tail.head) {
            Atom(func) => {
                func_name = cleanIdent(func);
                args = elems.tail.tail.tail.tail.tail; // seems like AppExprs get passed the func twice for resolution or smth
            }
            List(hlist) => {
                if (!hlist.head.matchesAtom("type")) return SExprRes.Malformed(sexpr);

                // expect: (VarExpr "method" (type ...) (VarExpr "class" (type ...)))
                def method_sexp = elems.tail.tail.head.forceList();
                if (method_sexp == null) return SExprRes.ParserBug;
                if (!method_sexp.head.matchesAtom("VarExpr[Inst]")) return SExprRes.Malformed(sexpr);

                def meth = cleanIdent(method_sexp.tail.head.forceAtom());
                if (meth == null) return SExprRes.ParserBug;

                def ty = method_sexp.tail.tail.head;
                def ty_list = ty.forceList();
                if (ty_list == null || !ty_list.head.matchesAtom("type")) return SExprRes.ParserBug;
                
                def klass = method_sexp.tail.tail.tail.head;
                def klass_list = klass.forceList();
                if (klass_list == null || !klass_list.head.matchesAtom("VarExpr[Type]")) return SExprRes.Malformed(sexpr);
                def klass_str = cleanIdent(klass_list.tail.head.forceAtom());
                if (klass_str == null) return SExprRes.ParserBug;

                func_name = Strings.format2("%s.%s", klass_str, meth);
                args = elems.tail.tail.tail;
            }
        }

        var i = 0;
        def args_arr: Array<VirgilExpr> = Array.new(Lists.length(args));
        for (n = args; n != null; n = n.tail) {
            def parseRes = VirgilExprs.from_sexpr(n.head);
            match (parseRes) {
                Success(e) => args_arr[i] = e;
                _ => return parseRes.castError();
            }
            i += 1;
        }

        return SExprRes.Success(VirgilExpr.AppExpr(func_name, args_arr));
    }

    def parse_binop_expr(sexpr: SExpr) -> SExprRes<VirgilExpr> {
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("BinOpExpr")) return SExprRes.ParserBug;

        def op = cleanIdent(elems.tail.head.forceAtom());
        if (op == null) return SExprRes.Malformed(sexpr);

        def tipe_ls = elems.tail.tail.head.forceList();
        if (tipe_ls == null || !tipe_ls.head.matchesAtom("type")) return SExprRes.Malformed(sexpr);

        def lhs = VirgilExprs.from_sexpr(elems.tail.tail.tail.head);
        def rhs = VirgilExprs.from_sexpr(elems.tail.tail.tail.tail.head);

        if (!lhs.isSuccess()) return lhs.castError();
        if (!rhs.isSuccess()) return rhs.castError();

        def l = lhs.orDefault(VirgilExpr.Literal("", ""));
        def r = rhs.orDefault(VirgilExpr.Literal("", ""));
        return SExprRes.Success(VirgilExpr.BinOpExpr(op, l, r));
    }

    def parse_literal(sexpr: SExpr) -> SExprRes<VirgilExpr> {
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("Literal")) return SExprRes.ParserBug;

        def lit = cleanIdent(elems.tail.head.forceAtom());
        if (lit == null) return SExprRes.Malformed(sexpr);

        def tipe = elems.tail.tail.head;
        def parsed_type_res = parse_type(tipe);
        if (!parsed_type_res.isSuccess()) return parsed_type_res.castError();
        def parsed_type = parsed_type_res.orDefault(null);

        return SExprRes.Success(VirgilExpr.Literal(parsed_type, lit));
    }

    def parse_if_expr(sexpr: SExpr) -> SExprRes<VirgilExpr> {
        def elems = sexpr.forceList();
        if (!elems.head.matchesAtom("IfExpr")) return SExprRes.ParserBug;

        return SExprRes.TODO; // not actually used in cbd right now
    }

    def parse_var_expr(sexpr: SExpr) -> SExprRes<VirgilExpr> {
        def elems = sexpr.forceList();

        // tag is VarExpr[None | ComponentMethod | Local]
        def tag = elems.head.forceAtom();
        if (tag == null) return SExprRes.ParserBug;
        if (!Strings.startsWith(tag, "VarExpr")) return SExprRes.ParserBug;

        def var_name = cleanIdent(elems.tail.head.forceAtom());
        if (var_name == null) return SExprRes.Malformed(sexpr);

        return SExprRes.Success(VirgilExpr.VarExpr(var_name));
    }
}
