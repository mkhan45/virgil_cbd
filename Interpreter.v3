// GENERATED BY `./test_processor.sh CanonicalDefs.v3cbd CanonicalDefs.v3cbd.sexp InterpreterTemplate.v3 > Interpreter.v3`

def UNREACHABLE() {
  trapUnreachable();
}
def LOCAL_GET() {
  var index = readImmULEB32();
  var tv = f_getLocalType(index);
  var val = getLocal(tv, index);
  push_Value(tv, val);
}
def LOCAL_SET() {
  var index = readImmULEB32();
  var tv = f_getLocalType(index);
  var val = pop_Value(tv);
  setLocal(tv, index, val);
}
def LOCAL_TEE() {
  var index = readImmULEB32();
  var tv = f_getLocalType(index);
  var val = pop_Value(tv);
  setLocal(tv, index, val);
  push_Value(tv, val);
}
def GLOBAL_GET() {
  var index = readImmULEB32();
  var tv = m_getGlobalType(index);
  var val = getGlobal(tv, index);
  push_Value(tv, val);
}
def GLOBAL_SET() {
  var index = readImmULEB32();
  var tv = m_getGlobalType(index);
  var val = pop_Value(tv);
  setGlobal(tv, index, val);
}
def TABLE_GET() {
  var table_index = readImmULEB32();
  if (m_isTable64(table_index)) {
  var index = pop_u64();
  var val = mach_readTable64(table_index, index);
  push_Object(val);
} else {
  var index = pop_u32();
  var val = mach_readTable32(table_index, index);
  push_Object(val);
}
}
def TABLE_SET() {
  var table_index = readImmULEB32();
  if (m_isTable64(table_index)) {
  var val = pop_Object();
  var index = pop_u64();
  mach_writeTable64(table_index, index, val);
} else {
  var val = pop_Object();
  var index = pop_u32();
  mach_writeTable32(table_index, index, val);
}
}
def CALL() {
  var index = readImmULEB32();
  var sig = m_getFuncSignature(index);
  var target = i_getFunction(index);
  doCall(sig, target);
}
def CALL_INDIRECT() {
  var sig_index = readImmULEB32();
  var table_index = readImmULEB32();
  var sig = m_getSignature(sig_index);
  if (m_isTable64(table_index)) {
  var func_index = pop_u64();
  var target = i_getTableFunction64(table_index, sig, func_index);
  doCall(sig, target);
} else {
  var func_index = pop_u32();
  var target = i_getTableFunction32(table_index, sig, func_index);
  doCall(sig, target);
}
}
def I32_CONST() {
  var x = readImmILEB32();
  System.puti(x);
  push_i32(x);
}
def I32_ADD() {
  var x = pop_u32();
  var y = pop_u32();
  var r = u32.+(x, y);
  push_u32(r);
}
def BR_IF() {
  var depth = readImmULEB32();
  var label = f_getLabel(depth);
  var cond = pop_u32();
  if (u32.!=(cond, 0)) 
    return doBranch(label);
  doFallThru();
}
def build_dispatch_table() -> Array<void -> void> {
  DISPATCH_TABLE = Array.new(0xE5 + 1);
  DISPATCH_TABLE[Opcode.UNREACHABLE.code] = UNREACHABLE;
  DISPATCH_TABLE[Opcode.LOCAL_GET.code] = LOCAL_GET;
  DISPATCH_TABLE[Opcode.LOCAL_SET.code] = LOCAL_SET;
  DISPATCH_TABLE[Opcode.LOCAL_TEE.code] = LOCAL_TEE;
  DISPATCH_TABLE[Opcode.GLOBAL_GET.code] = GLOBAL_GET;
  DISPATCH_TABLE[Opcode.GLOBAL_SET.code] = GLOBAL_SET;
  DISPATCH_TABLE[Opcode.TABLE_GET.code] = TABLE_GET;
  DISPATCH_TABLE[Opcode.TABLE_SET.code] = TABLE_SET;
  DISPATCH_TABLE[Opcode.CALL.code] = CALL;
  DISPATCH_TABLE[Opcode.CALL_INDIRECT.code] = CALL_INDIRECT;
  DISPATCH_TABLE[Opcode.I32_CONST.code] = I32_CONST;
  DISPATCH_TABLE[Opcode.I32_ADD.code] = I32_ADD;
  DISPATCH_TABLE[Opcode.BR_IF.code] = BR_IF;
  return DISPATCH_TABLE;
}

var codeptr: CodePtr;
var DISPATCH_TABLE: Array<void -> void> = build_dispatch_table();

// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: u64, high: u64);
type Label;
type Value;
class Object { }
type TypeVar;
type FieldOffset;
class Signature { }
class Function { }

enum FieldKind {
	U8, U16, I32, I64, F32, F64, V128, REF
}

def readImmULEB32() -> u32 {
    return codeptr.read_uleb32();
}

def readImmILEB32() -> i32 {
    return i32.!(codeptr.read_uleb32());
}

def readImmULEB64() -> u64 {
    return codeptr.read_uleb64();
}

def readImmILEB64() -> i64 {
    return i64.!(codeptr.read_uleb64());
}

def readImmU8() -> u8 {
    return codeptr.read1();
}

// Value stack.
def stack: Vector<i32> = Vector.new();

def pop_i32() -> i32;
def pop_u32() -> u32;
def pop_i64() -> i64;
def pop_u64() -> u64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> Value;

def push_i32(v: i32) {
    stack.put(v);
}
def push_u32(v: u32);
def push_i64(v: i64);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: Value);

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> Value;
def setLocal(tv: TypeVar, index: u32, v: Value);

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> Value;
def setGlobal(tv: TypeVar, index: u32, v: Value);

// Function context.
def f_getLabel(depth: u32) -> Label;
def f_getLocalType(index: u32) -> TypeVar;

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> Signature;
def m_getSignature(sig_index: u32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: Signature, func_index: u64) -> Function;
def i_getTableFunction32(table_index: u32, sig: Signature, func_index: u32) -> Function;
def i_getFunction(func_index: u32) -> Function;

// Control flow.
def doCall(sig: Signature, target: Function);
def doBranch(label: Label);
def doFallThru();

// Machine intrinsics.
def mach_readStructField_i8(obj: Object, offset: FieldOffset) -> i8;
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_i16(obj: Object, offset: FieldOffset) -> i16;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;

def mach_readTable64(table_index: u32, index: u64) -> Object;
def mach_readTable32(table_index: u32, index: u32) -> Object;

def mach_writeTable64(table_index: u32, index: u64, val: Object);
def mach_writeTable32(table_index: u32, index: u32, val: Object);

// Traps.
def invalid(); // should never occur
def trapNull();
def trapUnreachable();

component Interpreter {
    def init(code: Array<byte>) {
        codeptr = CodePtr.new(code);
    }

    def dispatch() {
        while (codeptr.pos < codeptr.data.length) {
            def op = codeptr.read_opcode();
            System.puts(op.mnemonic);
            System.ln();
            DISPATCH_TABLE[op.code]();
        }
    }
}
