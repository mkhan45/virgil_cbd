def main(args: Array<string>) {
    if (args.length < 1) {
        System.puts("Usage: VirgilSexpr <filename>\n");
        return;
    }

    def filename = args[0];
    def file_bytes = System.fileLoad(filename);
    if (file_bytes == null) {
        System.puts("Error reading ");
        System.puts(filename);
        System.ln();
        return;
    }

    // Parse the file into an S-expression
    def parser = SexpParser.new(filename, file_bytes);
    def sexp_res = parser.readSexp();
    
    match (sexp_res) {
        Success(sexp) => {
            // Print the original S-expression
            System.puts("Original S-expression:\n");
            def sexp_buf = StringBuilder.new();
            sexp.buildString(sexp_buf);
            System.puts(sexp_buf.toString());
            System.ln();
            System.ln();
            
            // Convert to VirgilStmt
            def stmt_res = VirgilStmts.from_sexpr(sexp);
            match (stmt_res) {
                Success(stmt) => {
                    // Print the VirgilStmt as Virgil code
                    System.puts("Converted to Virgil code:\n");
                    System.puts(stmt.toString());
                    System.ln();
                }
                TODO => {
                    System.puts("TODO: Not implemented yet.\n");
                }
                Malformed => {
                    System.puts("Error: Malformed S-expression for Virgil statement.\n");
                }
                MissingElements(expected, found) => {
                    System.puts("Error: Expected at least ");
                    System.puti(expected);
                    System.puts(" element(s), but found ");
                    System.puti(found);
                    System.puts(".\n");
                }
                InvalidTag(tag) => {
                    System.puts("Error: Invalid or unexpected tag \"");
                    System.puts(tag);
                    System.puts("\".\n");
                }
                InvalidStructure(desc) => {
                    System.puts("Error: Invalid structure - ");
                    System.puts(desc);
                    System.puts(".\n");
                }
                InvalidType(expected, found) => {
                    System.puts("Error: Expected type \"");
                    System.puts(expected);
                    System.puts("\", but found \"");
                    System.puts(found);
                    System.puts("\".\n");
                }
                MissingAttribute(name) => {
                    System.puts("Error: Missing required attribute \"");
                    System.puts(name);
                    System.puts("\".\n");
                }
            }
        }
        _ => {
            System.puts("Error parsing S-expression: ");
            match (sexp_res) {
                Expected(s) => {
                    System.puts("expected ");
                    System.puts(s);
                    System.ln();
                }
                EmptySexp => System.puts("empty sexp\n");
                Success(_) => {} // unreachable
            }
            System.puts("line: ");
            System.puti(parser.error_line);
            System.puts(", col: ");
            System.puti(parser.error_column);
            System.ln();
            System.puts(parser.error_msg);
            System.ln();
        }
    }
}
