// GENERATED BY InterpreterGen.v3
def UNREACHABLE() {
	def eff00 = trapUnreachable();
}
def LOCAL_GET() {
	def index0 = readImmULEB32();
	def arg61 = (index0);
	def tv2 = f_getLocalType(arg61);
	def arg53 = (index0);
	def arg44 = (tv2);
	def val5 = getLocal(arg44, arg53);
	def arg36 = (val5);
	def arg27 = (tv2);
	def eff18 = push_Value(arg27, arg36);
}
def LOCAL_SET() {
	def index0 = readImmULEB32();
	def arg141 = (index0);
	def tv2 = f_getLocalType(arg141);
	def arg133 = (tv2);
	def val4 = pop_Value(arg133);
	def arg125 = (val4);
	def arg116 = (index0);
	def arg107 = (tv2);
	def eff98 = setLocal(arg107, arg116, arg125);
}
def LOCAL_TEE() {
	def index0 = readImmULEB32();
	def arg171 = (index0);
	def tv2 = f_getLocalType(arg171);
	def arg163 = (tv2);
	def val4 = pop_Value(arg163);
	def arg155 = (val4);
	def arg146 = (index0);
	def arg137 = (tv2);
	def eff128 = setLocal(arg137, arg146, arg155);
	def arg119 = (val4);
	def arg1010 = (tv2);
	def eff911 = push_Value(arg1010, arg119);
}
def GLOBAL_GET() {
	def index0 = readImmULEB32();
	def arg171 = (index0);
	def tv2 = m_getGlobalType(arg171);
	def arg163 = (index0);
	def arg154 = (tv2);
	def val5 = getGlobal(arg154, arg163);
	def arg146 = (val5);
	def arg137 = (tv2);
	def eff128 = push_Value(arg137, arg146);
}
def GLOBAL_SET() {
	def index0 = readImmULEB32();
	def arg141 = (index0);
	def tv2 = m_getGlobalType(arg141);
	def arg133 = (tv2);
	def val4 = pop_Value(arg133);
	def arg125 = (val4);
	def arg116 = (index0);
	def arg107 = (tv2);
	def eff98 = setGlobal(arg107, arg116, arg125);
}
def TABLE_GET() {
	def table_index0 = readImmULEB32();
	def arg181 = (table_index0);
	def cond92 = m_isTable64(arg181);
	if (cond92) {
		def index3 = pop_u64();
		def arg134 = (index3);
		def arg125 = (table_index0);
		def val6 = mach_readTable64(arg125, arg134);
		def arg117 = (val6);
		def eff108 = push_Object(arg117);
	} else {
		def index9 = pop_u32();
		def arg1710 = (index9);
		def arg1611 = (table_index0);
		def val12 = mach_readTable32(arg1611, arg1710);
		def arg1513 = (val12);
		def eff1414 = push_Object(arg1513);
	}
}
def TABLE_SET() {
	def table_index0 = readImmULEB32();
	def arg241 = (table_index0);
	def cond152 = m_isTable64(arg241);
	if (cond152) {
		def val3 = pop_Object();
		def index4 = pop_u64();
		def arg195 = (val3);
		def arg186 = (index4);
		def arg177 = (table_index0);
		def eff168 = mach_writeTable64(arg177, arg186, arg195);
	} else {
		def val9 = pop_Object();
		def index10 = pop_u32();
		def arg2311 = (val9);
		def arg2212 = (index10);
		def arg2113 = (table_index0);
		def eff2014 = mach_writeTable32(arg2113, arg2212, arg2311);
	}
}
def CALL() {
	def index0 = readImmULEB32();
	def arg191 = (index0);
	def sig2 = m_getFuncSignature(arg191);
	def arg183 = (index0);
	def target4 = i_getFunction(arg183);
	def arg175 = (target4);
	def arg166 = (sig2);
	def eff157 = doCall(arg166, arg175);
}
def CALL_INDIRECT() {
	def sig_index0 = readImmULEB32();
	def table_index1 = readImmULEB32();
	def arg222 = (sig_index0);
	def sig3 = m_getSignature(arg222);
	def arg214 = (table_index1);
	def cond85 = m_isTable64(arg214);
	if (cond85) {
		def func_index6 = pop_u64();
		def arg147 = (func_index6);
		def arg138 = (sig3);
		def arg129 = (table_index1);
		def target10 = i_getTableFunction64(arg129, arg138, arg147);
		def arg1111 = (target10);
		def arg1012 = (sig3);
		def ret913 = doCall(arg1012, arg1111);
		return ret913;
	} else {
		def func_index14 = pop_u32();
		def arg2015 = (func_index14);
		def arg1916 = (sig3);
		def arg1817 = (table_index1);
		def target18 = i_getTableFunction32(arg1817, arg1916, arg2015);
		def arg1719 = (target18);
		def arg1620 = (sig3);
		def ret1521 = doCall(arg1620, arg1719);
		return ret1521;
	}
}
def I32_CONST() {
	def x0 = readImmILEB32();
	def arg231 = (x0);
	def eff222 = push_i32(arg231);
}
def I32_ADD() {
	def x0 = pop_i32();
	def y1 = pop_i32();
	def left52 = (x0);
	def right63 = (y1);
	def r4 = i32.+(left52, right63);
	def arg45 = (r4);
	def eff36 = push_i32(arg45);
}
def I32_SUB() {
	def x0 = pop_i32();
	def y1 = pop_i32();
	def left92 = (y1);
	def right103 = (x0);
	def r4 = i32.-(left92, right103);
	def arg85 = (r4);
	def eff76 = push_i32(arg85);
}
def I32_EQZ() {
	def x0 = pop_i32();
	def left121 = (x0);
	def right132 : int = 0;
	def cond73 = i32.==(left121, right132);
	if (cond73) {
		def arg94 : int = 1;
		def eff85 = push_i32(arg94);
	} else {
		def arg116 : int = 0;
		def eff107 = push_i32(arg116);
	}
}
def F32_MAX() {
	def b0 = pop_f32();
	def a1 = pop_f32();
	def r2 = (a1);
	def left173 = (a1);
	def right184 = (b0);
	def cond165 = float.>(left173, right184);
	if (cond165) {
	} else {
	}
	def left146 = (a1);
	def right157 = (b0);
	def cond138 = float.==(left146, right157);
	if (cond138) {
	} else {
	}
	def left119 = (b0);
	def right1210 = (a1);
	def cond1011 = float.>(left119, right1210);
	if (cond1011) {
	} else {
	}
	def arg912 = (r2);
	def eff813 = push_f32(arg912);
}
def BR() {
	def depth0 = readImmULEB32();
	def arg171 = (depth0);
	def label2 = f_getLabel(arg171);
	def arg163 = (label2);
	def eff154 = doBranch(arg163);
	def ret145 = (void);
	return ret145;
}
def BR_IF() {
	def depth0 = readImmULEB32();
	def arg121 = (depth0);
	def label2 = f_getLabel(arg121);
	def cond3 = pop_i32();
	def left104 = (cond3);
	def right115 : int = 0;
	def cond66 = i32.!=(left104, right115);
	if (cond66) {
		def arg87 = (label2);
		def eff78 = doBranch(arg87);
	} else {
		def eff99 = doFallThru();
	}
}
def BLOCK() {
	def bt0 = readImmBlockType();
	def arg111 = (bt0);
	def eff102 = doBlock(arg111);
}
def LOOP() {
	def bt0 = readImmBlockType();
	def arg41 = (bt0);
	def eff32 = doLoop(arg41);
}
def TRY() {
	def bt0 = readImmBlockType();
	def arg41 = (bt0);
	def eff32 = doTry(arg41);
}
def IF() {
	def bt0 = readImmBlockType();
	def cond1 = pop_i32();
	def arg92 : u32 = 0;
	def label3 = f_getLabel(arg92);
	def left74 = (cond1);
	def right85 : int = 0;
	def cond36 = i32.==(left74, right85);
	if (cond36) {
		def arg57 = (label3);
		def eff48 = doBranch(arg57);
	} else {
		def eff69 = doFallThru();
	}
}
def ELSE() {
	def arg120 : u32 = 0;
	def label1 = f_getLabel(arg120);
	def arg112 = (label1);
	def eff103 = doBranch(arg112);
}
def END() {
	def eff60 = doEnd();
	def cond41 = f_isAtEnd();
	if (cond41) {
		def eff52 = doReturn();
	} else {
	}
}
def build_dispatch_table() -> Array<void -> void> {
  DISPATCH_TABLE = Array.new(0xE5 + 1);
  DISPATCH_TABLE[Opcode.UNREACHABLE.code] = UNREACHABLE;
  DISPATCH_TABLE[Opcode.LOCAL_GET.code] = LOCAL_GET;
  DISPATCH_TABLE[Opcode.LOCAL_SET.code] = LOCAL_SET;
  DISPATCH_TABLE[Opcode.LOCAL_TEE.code] = LOCAL_TEE;
  DISPATCH_TABLE[Opcode.GLOBAL_GET.code] = GLOBAL_GET;
  DISPATCH_TABLE[Opcode.GLOBAL_SET.code] = GLOBAL_SET;
  DISPATCH_TABLE[Opcode.TABLE_GET.code] = TABLE_GET;
  DISPATCH_TABLE[Opcode.TABLE_SET.code] = TABLE_SET;
  DISPATCH_TABLE[Opcode.CALL.code] = CALL;
  DISPATCH_TABLE[Opcode.CALL_INDIRECT.code] = CALL_INDIRECT;
  DISPATCH_TABLE[Opcode.I32_CONST.code] = I32_CONST;
  DISPATCH_TABLE[Opcode.I32_ADD.code] = I32_ADD;
  DISPATCH_TABLE[Opcode.I32_SUB.code] = I32_SUB;
  DISPATCH_TABLE[Opcode.I32_EQZ.code] = I32_EQZ;
  DISPATCH_TABLE[Opcode.F32_MAX.code] = F32_MAX;
  DISPATCH_TABLE[Opcode.BR.code] = BR;
  DISPATCH_TABLE[Opcode.BR_IF.code] = BR_IF;
  DISPATCH_TABLE[Opcode.BLOCK.code] = BLOCK;
  DISPATCH_TABLE[Opcode.LOOP.code] = LOOP;
  DISPATCH_TABLE[Opcode.TRY.code] = TRY;
  DISPATCH_TABLE[Opcode.IF.code] = IF;
  DISPATCH_TABLE[Opcode.ELSE.code] = ELSE;
  DISPATCH_TABLE[Opcode.END.code] = END;
  return DISPATCH_TABLE;
}

var codeptr: CodePtr;
var DISPATCH_TABLE: Array<void -> void> = build_dispatch_table();
var local_types: Vector<TypeVar>; // TODO: just get ValueKinds from stack
var stack: ArrayStack<Value>;

type CtlEntry {
	case Block(end_pc: int);
	case Loop(start_pc: int, end_pc: int);
        case None;
}
var ctls: Array<CtlEntry>;
var ctl_stack: ArrayStack<int>;

// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: u64, high: u64);
type Label(depth: u32);
// type Value;
// class Object { }
type TypeVar {
    case I32;
}
type FieldOffset;
class Signature { }
// class Function { }

enum FieldKind {
	U8, U16, I32, I64, F32, F64, V128, REF
}

def readImmULEB32() -> u32 {
    return codeptr.read_uleb32();
}

def readImmILEB32() -> i32 {
    return i32.!(codeptr.read_uleb32());
}

def readImmULEB64() -> u64 {
    return codeptr.read_uleb64();
}

def readImmILEB64() -> i64 {
    return i64.!(codeptr.read_uleb64());
}

def readImmU8() -> u8 {
    return codeptr.read1();
}

def readImmBlockType() -> () {
    def bt = codeptr.read_BlockTypeCode();
    return ();
}

def pop_i32() -> i32 {
    match (stack.pop()) {
        I32(u) => return i32.view(u);
        _ => return 0; // TODO: fail() function
    }
}
def pop_u32() -> u32 {
    match (stack.pop()) {
        I32(u) => return u;
        _ => return 0; // TODO: fail() function
    }
}
def pop_i64() -> i64;
def pop_u64() -> u64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> Value {
    return stack.pop();
}

def push_i32(v: i32) {
    stack.push(Value.I32(u32.view(v)));
}
def push_u32(v: u32) {
    stack.push(Value.I32(v));
}
def push_i64(v: i64);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: Value) {
    stack.push(v);
}

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> Value {
    return stack.elems[index];
}
def setLocal(tv: TypeVar, index: u32, v: Value) {
    stack.elems[index] = v;
}

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> Value;
def setGlobal(tv: TypeVar, index: u32, v: Value);

// Function context.
def f_getLabel(depth: u32) -> Label {
    return Label(depth);
}

def f_getLocalType(index: u32) -> TypeVar {
    return local_types[int.!(index)];
}

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> Signature;
def m_getSignature(sig_index: u32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: Signature, func_index: u64) -> Function;
def i_getTableFunction32(table_index: u32, sig: Signature, func_index: u32) -> Function;
def i_getFunction(func_index: u32) -> Function;

// Control flow.
def doCall(sig: Signature, target: Function);

def doBranch(label: Label) {
    for (i < label.depth) ctl_stack.pop();
    def ctl_idx = ctl_stack.peek();
    match (ctls[ctl_idx]) {
        Block(end_pc) => {
            if (end_pc == -1) {
		skipToEnd(label.depth);
		ctls[ctl_idx] = CtlEntry.Block(codeptr.pos);
            } else {
		codeptr.at(end_pc);
	    }
	    ctl_stack.pop();
        }
	Loop(start_pc, end_pc) => {
		codeptr.at(start_pc);
	}
	None => invalid();
    }
}

def skipToEnd(depth: u32) {
    while (depth + 1 > 0) {
	def op = codeptr.read_opcode();
	if (op == Opcode.END) depth -= 1;
	codeptr.skip_immediates(op.imms);
    }
}

def doFallThru() {
}

// Machine intrinsics.
def mach_readStructField_i8(obj: Object, offset: FieldOffset) -> i8;
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_i16(obj: Object, offset: FieldOffset) -> i16;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;

def mach_readTable64(table_index: u32, index: u64) -> Object;
def mach_readTable32(table_index: u32, index: u32) -> Object;

def mach_writeTable64(table_index: u32, index: u64, val: Object);
def mach_writeTable32(table_index: u32, index: u32, val: Object);

// Traps.
def invalid(); // should never occur
def trapNull();
def trapUnreachable();

def doBlock(bt: ()) {
    if (ctls[codeptr.pos] == CtlEntry.None) ctls[codeptr.pos] = CtlEntry.Block(-1);
    ctl_stack.push(codeptr.pos);
}

def doLoop(bt: ()) {
    if (ctls[codeptr.pos] == CtlEntry.None) ctls[codeptr.pos] = CtlEntry.Loop(codeptr.pos, -1);
    ctl_stack.push(codeptr.pos);
}

def doEnd() {
    def ctl_idx = ctl_stack.pop();
    match (ctls[ctl_idx]) {
        Block(end_pc) => if (end_pc == -1) ctls[ctl_idx] = CtlEntry.Block(codeptr.pos);
        Loop(start_pc, end_pc) => if (end_pc == -1) ctls[ctl_idx] = CtlEntry.Loop(start_pc, codeptr.pos);
        None => doReturn();
    }
}

def doReturn() {
    return;
}

def doTry(bt: ()) {
    return;
}

def f_isAtEnd() -> bool {
    return codeptr.pos >= codeptr.data.length;
}

def push_locals(count: u32, vtc: ValueTypeCode) {
    System.puts("push\n");
    var tv: TypeVar;
    match (vtc.code) {
        BpTypeCode.I32.val => tv = TypeVar.I32;
        _ => tv = TypeVar.I32; // TODO
    }
    
    for (i < count) local_types.put(tv);
}

component Interpreter {
    def init(code: Array<byte>, args: Array<int>) {
        codeptr = CodePtr.new(code);
        local_types = Vector.new();
        stack = ArrayStack.new();

        ctls = Array.new(code.length);
        for (i < code.length) ctls[i] = CtlEntry.None;
        ctl_stack = ArrayStack.new();

        for (a in args) local_types.put(TypeVar.I32);
        for (a in args) stack.push(Value.I32(u32.!(a)));
    }

    def dispatch() {
        codeptr.iterate_local_codes(push_locals);
        while (codeptr.pos < codeptr.data.length) {
            def op = codeptr.read_opcode();
	    print_stack();
            System.puts(op.mnemonic);
            System.ln();
            DISPATCH_TABLE[op.code]();
        }
    }

    def get_stack() -> ArrayStack<Value> {
        return stack;
    }

    def print_stack() {
	System.puts("[");
	for (i < stack.top) {
	    match (stack.elems[i]) {
		I32(i) => System.puti(i32.!(i));
		_ => {}
	    }
	    if (i < stack.top - 1) System.puts(" ");
	}
	System.puts("]\n");
    }
}
