def build_dispatch_table() -> Array<void -> void> { return Array.new(0); } // dummy so this file compiles independently, replaced by processor

class Frame {
    var parent: Frame;
    var fp: int;
    var sidetable: Vector<(int, int)>;
    var stp: int;
    var local_types: Vector<TypeVar>; // TODO: just get ValueKinds from stack
    var codeptr: CodePtr;
    var num_rets: int;

    new(parent: Frame, fn: CBDFunction) {
        fp = stack.top - fn.args.length;
        sidetable = fn.sidetable;
        stp = 0;
        codeptr = CodePtr.new(fn.code);
        local_types = fn.locals;
        num_rets = fn.rets.length;
    }
}

type CBDValue #unboxed {
    case I32(val: u32);
    case U32(val: u32);
}

var functions: Vector<CBDFunction>;

var current_frame: Frame;
var DISPATCH_TABLE: Array<void -> void> = build_dispatch_table();
var stack: ArrayStack<CBDValue>;

def HAS_MEM_INDEX = 0x40u8;

def readImmULEB32() -> u32 {
    return current_frame.codeptr.read_uleb32();
}

def readImmILEB32() -> i32 {
    return i32.!(current_frame.codeptr.read_uleb32());
}

def readImmULEB64() -> u64 {
    return current_frame.codeptr.read_uleb64();
}

def readImmILEB64() -> i64 {
    return i64.!(current_frame.codeptr.read_uleb64());
}

def readImmU8() -> u8 {
    return current_frame.codeptr.read1();
}

def readImmBlockType() -> () {
    def bt = current_frame.codeptr.read_BlockTypeCode();
    return ();
}

def pop_i32() -> i32 {
    return i32.view(CBDValue.I32.!(stack.pop()).val);
}
def pop_u32() -> u32 {
    return CBDValue.I32.!(stack.pop()).val;
}
def pop_i64() -> i64;
def pop_u64() -> u64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> CBDValue {
    return stack.pop();
}

def push_i32(v: i32) {
    stack.push(CBDValue.I32(u32.view(v)));
}
def push_u32(v: u32) {
    stack.push(CBDValue.I32(v));
}
def push_i64(v: i64);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: CBDValue) {
    stack.push(v);
}

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> CBDValue {
    return stack.elems[current_frame.fp + int.!(index)];
}
def setLocal(tv: TypeVar, index: u32, v: CBDValue) {
    stack.elems[current_frame.fp + int.!(index)] = v;
}

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> CBDValue;
def setGlobal(tv: TypeVar, index: u32, v: CBDValue);

// CBDFunction context.
def f_getLabel(depth: u32) -> Label {
    return Label(depth);
}

def f_getLocalType(index: u32) -> TypeVar {
    return current_frame.local_types[int.!(index)];
}

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> SigDecl {
    return null; // already in CBDFunction, TODO: refactor
}
def m_getSignature(sig_index: u32) -> SigDecl;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: SigDecl, func_index: u64) -> CBDFunction;
def i_getTableFunction32(table_index: u32, sig: SigDecl, func_index: u32) -> CBDFunction;
def i_getFunction(func_index: u32) -> CBDFunction {
    return functions[int.!(func_index)];
}

// Control flow.
def doCall(sig: SigDecl, target: CBDFunction) {
    def new_frame = Frame.new(current_frame, target);
    current_frame = new_frame;
    current_frame.codeptr.iterate_local_codes(push_locals);
}

def doBranch(label: Label) {
    def ste = current_frame.sidetable[current_frame.stp];
    current_frame.codeptr.at(ste.0);
    current_frame.stp = ste.1;
}

def doFallThru() {
    current_frame.stp += 1;
}

// Machine intrinsics.
def mach_readStructField_i8(obj: Object, offset: FieldOffset) -> i8;
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_i16(obj: Object, offset: FieldOffset) -> i16;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;

def mach_readTable64(table_index: u32, index: u64) -> Object;
def mach_readTable32(table_index: u32, index: u32) -> Object;

def mach_writeTable64(table_index: u32, index: u64, val: Object);
def mach_writeTable32(table_index: u32, index: u32, val: Object);

// Traps.
def invalid(); // should never occur
def trapNull();
def trapUnreachable();

def doBlock(bt: ()) {
}

def doLoop(bt: ()) {
}

def doEnd() {
}

def doReturn() {
    // TODO
    def ret = stack.pop();
    stack.top = current_frame.fp;
    current_frame = current_frame.parent;
    stack.push(ret);
}

def doTry(bt: ()) {
    return;
}

def f_isAtEnd() -> bool {
    return current_frame.codeptr.pos >= current_frame.codeptr.data.length;
}

def push_locals(count: u32, vtc: ValueTypeCode) {
    System.puts("push\n");
    var tv: TypeVar;
    match (vtc.code) {
        BpTypeCode.I32.val => tv = TypeVar.I32;
        _ => tv = TypeVar.I32; // TODO
    }
    
    for (i < count) current_frame.local_types.put(tv);
}

component Interpreter {
    def init(fns: Vector<CBDFunction>, main_idx: int, args: Array<int>) {
        for (i < fns.length) {
            def fn = fns[i];
            Validator.init(fn.code, fn.locals.copy(), fn.rets.copy());
            Validator.dispatch();
            def sts = Validator.build_sidetable();
            fn.sidetable = sts.1;
            System.puts("validated ");
            System.puti(i);
            System.ln();
        }

        stack = ArrayStack<CBDValue>.new();
        for (arg in args) stack.push(CBDValue.I32(u32.view(arg)));
        functions = fns;
        current_frame = Frame.new(null, functions[main_idx]);
    }

    def dispatch() {
        current_frame.codeptr.iterate_local_codes(push_locals);
        while (current_frame != null && current_frame.codeptr.pos < current_frame.codeptr.data.length) {
            def op = current_frame.codeptr.read_opcode();
            // print_stack();
            // System.puts(op.mnemonic);
            // System.ln();
            DISPATCH_TABLE[op.code]();
        }
    }

    def get_stack() -> ArrayStack<CBDValue> {
        return stack;
    }

    def print_stack() {
        System.puts("[");
        for (i < stack.top) {
            match (stack.elems[i]) {
                I32(i) => System.puti(i32.!(i));
                _ => {}
            }
            if (i < stack.top - 1) System.puts(" ");
        }
        System.puts("]\n");
    }
}
