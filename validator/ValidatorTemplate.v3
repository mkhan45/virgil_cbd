def build_dispatch_table() -> Array<void -> void> { return Array.new(0); } // dummy so this file compiles independently, replaced by processor

var codeptr: CodePtr;
var DISPATCH_TABLE: Array<void -> void> = build_dispatch_table();
var local_types: Vector<TypeVar>;
var stack: ArrayStack<TypeVar>;

// this is mainly to lift sidetable vars out of conditionals,
// probably a lot of ways to dodge that
var st_builder: STBuilder = STBuilder.new();
var st_entries: Vector<STEntry> = Vector.new();
var st_controls: Vector<int> = Vector.new(); // ctl idx of target

def assert(b: bool) {
    if (!b) {
        System.puts("assert fail :(\n");
	return [][1];
    }
}

type CtlEntry {
	case Block(end_pc: int, cont_stp: int);
	case Loop(start_pc: int, end_pc: int, cont_stp: int);
        case None;
}
var ctls: Array<CtlEntry>;
var ctl_stack: ArrayStack<int>;

// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: u64, high: u64);
type Label(depth: u32);
// class Object { }
type TypeVar {
    case I32 {
        def plus(lhs: TypeVar.I32, rhs: TypeVar.I32) -> TypeVar.I32 { return TypeVar.I32; }
        def minus(lhs: TypeVar.I32, rhs: TypeVar.I32) -> TypeVar.I32 { return TypeVar.I32; }
    }
    case U32;
    case U64;
    case F32 {
    }
    case Err;
}
def rtcast_i32(x: i32) -> TypeVar.I32 {
    return TypeVar.I32;
}
type FieldOffset;
class Signature { }
// class Function { }

enum FieldKind {
	U8, U16, I32, I64, F32, F64, V128, REF
}

def readImmULEB32() -> u32 {
    return codeptr.read_uleb32();
}

def readImmILEB32() -> i32 {
    return i32.!(codeptr.read_uleb32());
}

def readImmULEB64() -> u64 {
    return codeptr.read_uleb64();
}

def readImmILEB64() -> i64 {
    return i64.!(codeptr.read_uleb64());
}

def readImmU8() -> u8 {
    return codeptr.read1();
}

def readImmBlockType() -> () {
    def bt = codeptr.read_BlockTypeCode();
    return ();
}

def pop_i32() -> TypeVar.I32 {
    match (stack.pop()) {
        I32 => return TypeVar.I32;
        _ => {
	    assert(false);
	    return TypeVar.I32;
	}
    }
}
def pop_u32() -> TypeVar.U32 {
    match (stack.pop()) {
        U32 => return TypeVar.U32;
        _ => {
	    assert(false);
	    return TypeVar.U32;
	}
    }
}
def pop_i64() -> i64;
def pop_u64() -> TypeVar.U64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> TypeVar {
    assert(tv == stack.pop());
    return tv;
}

def push_i32(v: TypeVar.I32) {
    stack.push(v);
}
def push_u32(v: u32) {
    stack.push(TypeVar.U32);
}
def trueVal() -> TypeVar.I32 {
    return TypeVar.I32;
}
def falseVal() -> TypeVar.I32 {
    return TypeVar.I32;
}
def i32_eqz(x: TypeVar.I32) -> TypeVar.I32 {
    return TypeVar.I32;
}
def push_i64(v: i64);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: TypeVar) {
    // TODO: assert v has tv
    stack.push(tv);
}

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> TypeVar {
    return stack.elems[index];
}
def setLocal(tv: TypeVar, index: u32, v: TypeVar) {
    // TODO: assert that v has tv
    stack.elems[index] = tv;
}

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> TypeVar;
def setGlobal(tv: TypeVar, index: u32, v: TypeVar);

// Function context.
def f_getLabel(depth: u32) -> int {
    return int.!(depth);
}

def f_getLocalType(index: u32) -> TypeVar {
    return local_types[int.!(index)];
}

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> Signature;
def m_getSignature(sig_index: u32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: Signature, func_index: TypeVar.U64) -> Function;
def i_getTableFunction32(table_index: u32, sig: Signature, func_index: TypeVar.U32) -> Function;
def i_getFunction(func_index: u32) -> Function;

// Control flow.
def doCall(sig: Signature, target: Function);

def doBranch(label: int) {
    def ctl_idx = ctl_stack.elems[ctl_stack.top - 1 - label];
    st_controls.put(ctl_idx);
}

def doFallThru() {
}

// Machine intrinsics.
def mach_readStructField_i8(obj: Object, offset: FieldOffset) -> i8;
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_i16(obj: Object, offset: FieldOffset) -> i16;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;

def mach_readTable64(table_index: u32, index: TypeVar.U64) -> Object;
def mach_readTable32(table_index: u32, index: TypeVar.U32) -> Object;

def mach_writeTable64(table_index: u32, index: TypeVar.U64, val: Object);
def mach_writeTable32(table_index: u32, index: TypeVar.U32, val: Object);

// Traps.
def invalid();
def trapNull();
def trapUnreachable();

def doBlock(bt: ()) {
    if (ctls[codeptr.pos] == CtlEntry.None) ctls[codeptr.pos] = CtlEntry.Block(-1, -1);
    ctl_stack.push(codeptr.pos);
}

def doLoop(bt: ()) {
    if (ctls[codeptr.pos] == CtlEntry.None) ctls[codeptr.pos] = CtlEntry.Loop(codeptr.pos, -1, st_entries.length);
    ctl_stack.push(codeptr.pos);
}

def doEnd() {
    def ctl_idx = ctl_stack.pop();
    match (ctls[ctl_idx]) {
        Block(end_pc, cont_stp) =>
	    if (end_pc == -1) ctls[ctl_idx] = CtlEntry.Block(codeptr.pos, st_entries.length - 1);
        Loop(start_pc, end_pc, cont_stp) => 
	    if (end_pc == -1) ctls[ctl_idx] = CtlEntry.Loop(start_pc, codeptr.pos, cont_stp);
        None => doReturn();
    }
}

def doReturn() {
    return;
}

def doTry(bt: ()) {
    return;
}

def f_isAtEnd() -> bool {
    return codeptr.pos >= codeptr.data.length;
}

def push_locals(count: u32, vtc: ValueTypeCode) {
    System.puts("push\n");
    var tv: TypeVar;
    match (vtc.code) {
        BpTypeCode.I32.val => tv = TypeVar.I32;
        _ => tv = TypeVar.I32; // TODO
    }
    
    for (i < count) local_types.put(tv);
}

component Validator {
    def init(code: Array<byte>, args: Array<TypeVar>, ret: Array<TypeVar>) {
        codeptr = CodePtr.new(code);
        local_types = Vector.new();
        stack = ArrayStack.new();

        ctls = Array.new(code.length);
        for (i < code.length) ctls[i] = CtlEntry.None;
        ctl_stack = ArrayStack.new();

        for (a in args) local_types.put(TypeVar.I32);
        for (a in args) stack.push(a);
    }

    def dispatch() {
        codeptr.iterate_local_codes(push_locals);
        while (codeptr.pos < codeptr.data.length) {
            def op = codeptr.read_opcode();
            System.puts(op.mnemonic);
            System.ln();
            DISPATCH_TABLE[op.code]();
        }
    }

    // for other sidetable entries, do we need a post processing phase?
    def build_sidetable() -> (Vector<STEntry>, Vector<(int, int)>) {
        def reified_st_controls = Vector<(int, int)>.new();
	for (i < st_controls.length) {
            def target_ctl = ctls[st_controls[i]];
	    var target_stp = -1;
	    var target_pc = -1;
	    match (target_ctl) {
		Block(epc, cstp) => {
		    target_pc = epc;
		    target_stp = cstp;
		}
		Loop(spc, epc, cstp) => {
		    target_pc = spc;
		    target_stp = cstp;
		}
		None => invalid();
	    }
	    reified_st_controls.put(target_pc, target_stp);
        }
        return (st_entries, reified_st_controls);
    }
}
