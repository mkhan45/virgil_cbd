// GENERATED BY ValidatorGen.v3
// st bitset: 0
def UNREACHABLE() {
	// eff01 -- static: no, type: ⊥, effect: none

}
// st bitset: 0
def LOCAL_GET() {
	// val13 -- static: no, type: ⊥, effect: none
// index8 -- static: yes, type: u32, effect: ctl
// eff216 -- static: no, type: ⊥, effect: push
// arg414 -- static: no, type: ⊥, effect: none
// arg315 -- static: yes, type: ⊥, effect: none
// arg611 -- static: yes, type: u32, effect: none
// arg512 -- static: yes, type: ⊥, effect: none
// tv10 -- static: yes, type: ⊥, effect: none
// arg79 -- static: yes, type: u32, effect: none

	def index8 = readImmULEB32();
	def tv10 = f_getLocalType(index8);
	def val13 = getLocal(tv10, index8);
	def eff216 = push_Value(tv10, val13);
}
// st bitset: 0
def LOCAL_SET() {
	// arg1929 -- static: yes, type: u32, effect: none
// index23 -- static: yes, type: u32, effect: ctl
// tv25 -- static: yes, type: ⊥, effect: none
// arg2028 -- static: no, type: ⊥, effect: none
// arg1830 -- static: yes, type: ⊥, effect: none
// arg2126 -- static: yes, type: ⊥, effect: none
// eff1731 -- static: no, type: ⊥, effect: none
// arg2224 -- static: yes, type: u32, effect: none
// val27 -- static: no, type: ⊥, effect: pop

	def index23 = readImmULEB32();
	def tv25 = f_getLocalType(index23);
	def val27 = pop_Value(tv25);
}
// st bitset: 0
def LOCAL_TEE() {
	// val45 -- static: no, type: ⊥, effect: pop
// arg3450 -- static: no, type: ⊥, effect: none
// arg3351 -- static: yes, type: ⊥, effect: none
// eff3252 -- static: no, type: ⊥, effect: push
// arg4042 -- static: yes, type: u32, effect: none
// index41 -- static: yes, type: u32, effect: ctl
// arg3846 -- static: no, type: ⊥, effect: none
// arg3747 -- static: yes, type: u32, effect: none
// arg3648 -- static: yes, type: ⊥, effect: none
// tv43 -- static: yes, type: ⊥, effect: none
// arg3944 -- static: yes, type: ⊥, effect: none
// eff3549 -- static: no, type: ⊥, effect: none

	def index41 = readImmULEB32();
	def tv43 = f_getLocalType(index41);
	def val45 = pop_Value(tv43);
	def eff3252 = push_Value(tv43, val45);
}
// st bitset: 0
def GLOBAL_GET() {
	// index59 -- static: yes, type: u32, effect: ctl
// arg5565 -- static: no, type: ⊥, effect: none
// arg5466 -- static: yes, type: ⊥, effect: none
// arg5762 -- static: yes, type: u32, effect: none
// arg5663 -- static: yes, type: ⊥, effect: none
// eff5367 -- static: no, type: ⊥, effect: push
// arg5860 -- static: yes, type: u32, effect: none
// val64 -- static: no, type: ⊥, effect: none
// tv61 -- static: yes, type: ⊥, effect: none

	def index59 = readImmULEB32();
	def tv61 = m_getGlobalType(index59);
	def val64 = getGlobal(tv61, index59);
	def eff5367 = push_Value(tv61, val64);
}
// st bitset: 0
def GLOBAL_SET() {
	// val78 -- static: no, type: ⊥, effect: pop
// arg7179 -- static: no, type: ⊥, effect: none
// arg6981 -- static: yes, type: ⊥, effect: none
// arg7277 -- static: yes, type: ⊥, effect: none
// eff6882 -- static: no, type: ⊥, effect: none
// arg7375 -- static: yes, type: u32, effect: none
// index74 -- static: yes, type: u32, effect: ctl
// tv76 -- static: yes, type: ⊥, effect: none
// arg7080 -- static: yes, type: u32, effect: none

	def index74 = readImmULEB32();
	def tv76 = m_getGlobalType(index74);
	def val78 = pop_Value(tv76);
}
// st bitset: 0
def TABLE_GET() {
	// table_index93 -- static: yes, type: u32, effect: ctl
// arg91103 -- static: no, type: ⊥, effect: none
// arg8797 -- static: no, type: ⊥, effect: none
// arg8698 -- static: yes, type: u32, effect: none
// val99 -- static: no, type: ⊥, effect: none
// val105 -- static: no, type: ⊥, effect: none
// eff88107 -- static: no, type: ⊥, effect: push
// eff84101 -- static: no, type: ⊥, effect: push
// index102 -- static: no, type: ⊥, effect: pop
// index96 -- static: no, type: ⊥, effect: pop
// arg89106 -- static: no, type: ⊥, effect: none
// arg85100 -- static: no, type: ⊥, effect: none
// arg9294 -- static: yes, type: u32, effect: none
// cond8395 -- static: yes, type: ⊥, effect: none
// arg90104 -- static: yes, type: u32, effect: none

	def table_index93 = readImmULEB32();
	def index96 = pop_u64();
	def val99 = mach_readTable64(table_index93, index96);
	def eff84101 = push_Object(val99);
}
// st bitset: 0
def TABLE_SET() {
	// arg117119 -- static: yes, type: u32, effect: none
// arg111124 -- static: no, type: ⊥, effect: none
// arg116129 -- static: no, type: ⊥, effect: none
// arg112123 -- static: no, type: ⊥, effect: none
// index128 -- static: no, type: ⊥, effect: pop
// val127 -- static: no, type: ⊥, effect: pop
// eff113132 -- static: no, type: ⊥, effect: none
// arg114131 -- static: yes, type: u32, effect: none
// index122 -- static: no, type: ⊥, effect: pop
// eff109126 -- static: no, type: ⊥, effect: none
// arg115130 -- static: no, type: ⊥, effect: none
// table_index118 -- static: yes, type: u32, effect: ctl
// val121 -- static: no, type: ⊥, effect: pop
// cond108120 -- static: yes, type: ⊥, effect: none
// arg110125 -- static: yes, type: u32, effect: none

	def table_index118 = readImmULEB32();
	def val121 = pop_Object();
	def index122 = pop_u64();
}
// st bitset: 0
def CALL() {
	// arg137139 -- static: yes, type: u32, effect: none
// eff133145 -- static: no, type: ⊥, effect: none
// index138 -- static: yes, type: u32, effect: ctl
// arg134144 -- static: yes, type: ⊥, effect: none
// arg135143 -- static: no, type: ⊥, effect: none
// arg136141 -- static: yes, type: u32, effect: none
// target142 -- static: no, type: ⊥, effect: none
// sig140 -- static: yes, type: ⊥, effect: none

	def index138 = readImmULEB32();
}
// st bitset: 1
def CALL_INDIRECT() {
	// func_index167 -- static: no, type: ⊥, effect: pop
// arg156178 -- static: yes, type: u32, effect: none
// arg150170 -- static: yes, type: u32, effect: none
// func_index175 -- static: no, type: ⊥, effect: pop
// arg157177 -- static: yes, type: ⊥, effect: none
// table_index162 -- static: yes, type: u32, effect: ctl
// cond146166 -- static: yes, type: ⊥, effect: none
// arg158176 -- static: no, type: ⊥, effect: none
// target179 -- static: no, type: ⊥, effect: none
// arg159165 -- static: yes, type: u32, effect: none
// arg154181 -- static: yes, type: ⊥, effect: none
// arg148173 -- static: yes, type: ⊥, effect: none
// arg155180 -- static: no, type: ⊥, effect: none
// sig_index161 -- static: yes, type: u32, effect: ctl
// sig164 -- static: yes, type: ⊥, effect: none
// arg151169 -- static: yes, type: ⊥, effect: none
// ret153182 -- static: no, type: ⊥, effect: none
// arg149172 -- static: no, type: ⊥, effect: none
// arg152168 -- static: no, type: ⊥, effect: none
// ret147174 -- static: no, type: ⊥, effect: none
// target171 -- static: no, type: ⊥, effect: none
// arg160163 -- static: yes, type: u32, effect: none

	def sig_index161 = readImmULEB32();
	def table_index162 = readImmULEB32();
	def func_index167 = pop_u64();
}
// st bitset: 0
def I32_CONST() {
	// arg184186 -- static: no, type: i32, effect: none
// x185 -- static: yes, type: i32, effect: ctl
// eff183187 -- static: no, type: ⊥, effect: push

	def x185 = readImmILEB32();
	def arg184186 = rtcast_i32(x185);
	def eff183187 = push_i32(arg184186);
}
// st bitset: 0
def I32_ADD() {
	// eff188198 -- static: no, type: ⊥, effect: push
// arg189197 -- static: no, type: ⊥, effect: none
// x192 -- static: no, type: i32, effect: pop
// y193 -- static: no, type: i32, effect: pop
// left190194 -- static: no, type: i32, effect: none
// right191195 -- static: no, type: i32, effect: none
// TypeVar.I32.plus -- static: no, type: i32, effect: none
// r196 -- static: no, type: ⊥, effect: none

	def x192 = pop_i32();
	def y193 = pop_i32();
	def r196 = TypeVar.I32.plus(x192, y193);
	def eff188198 = push_i32(r196);
}
// st bitset: 0
def I32_SUB() {
	// r207 -- static: no, type: ⊥, effect: none
// TypeVar.I32.minus -- static: no, type: i32, effect: none
// eff199209 -- static: no, type: ⊥, effect: push
// left201205 -- static: no, type: i32, effect: none
// right202206 -- static: no, type: i32, effect: none
// arg200208 -- static: no, type: ⊥, effect: none
// x203 -- static: no, type: i32, effect: pop
// y204 -- static: no, type: i32, effect: pop

	def x203 = pop_i32();
	def y204 = pop_i32();
	def r207 = TypeVar.I32.minus(y204, x203);
	def eff199209 = push_i32(r207);
}
// st bitset: 0
def I32_EQZ() {
	// eff211222 -- static: no, type: ⊥, effect: push
// eff213224 -- static: no, type: ⊥, effect: push
// rtcast226 -- static: no, type: i32, effect: none
// cond210220 -- static: no, type: ⊥, effect: none
// arg212221 -- static: no, type: i32, effect: none
// arg214223 -- static: no, type: i32, effect: none
// TypeVar.I32.equals -- static: no, type: i32, effect: none
// x217 -- static: no, type: i32, effect: pop
// left215218 -- static: no, type: i32, effect: none
// right216219 -- static: yes, type: i32, effect: none
// lit225 -- static: yes, type: ⊥, effect: none

	def x217 = pop_i32();
	def lit225 : int = 1;
	def arg212221 = rtcast_i32(lit225);
	def eff211222 = push_i32(arg212221);
}
// st bitset: 0
def F32_MAX() {
	// cond232246 -- static: no, type: ⊥, effect: none
// a239 -- static: no, type: f32, effect: pop
// left236241 -- static: no, type: f32, effect: none
// right237242 -- static: no, type: f32, effect: none
// TypeVar.F32.equals -- static: no, type: f32, effect: none
// cond229249 -- static: no, type: ⊥, effect: none
// b238 -- static: no, type: f32, effect: pop
// cond235243 -- static: no, type: ⊥, effect: none
// left230247 -- static: no, type: f32, effect: none
// right231248 -- static: no, type: f32, effect: none
// TypeVar.F32.gt -- static: no, type: f32, effect: none
// eff227251 -- static: no, type: ⊥, effect: push
// arg228250 -- static: no, type: f32, effect: none
// left233244 -- static: no, type: f32, effect: none
// right234245 -- static: no, type: f32, effect: none
// r240 -- static: no, type: f32, effect: none

	def b238 = pop_f32();
	def a239 = pop_f32();
	def eff227251 = push_f32(a239);
}
// st bitset: 2
def BR() {
	// arg255257 -- static: yes, type: u32, effect: none
// label258 -- static: yes, type: ⊥, effect: none
// depth256 -- static: yes, type: u32, effect: ctl
// eff253260 -- static: no, type: ⊥, effect: ctl
// ret252261 -- static: no, type: i32, effect: none
// arg254259 -- static: yes, type: ⊥, effect: none

	def depth256 = readImmULEB32();
	def label258 = f_getLabel(depth256);
	def eff253260 = doBranch(label258);
	return void;
}
// st bitset: 2
def BR_IF() {
	// eff263277 -- static: no, type: ⊥, effect: ctl
// cond262275 -- static: no, type: ⊥, effect: none
// arg264276 -- static: yes, type: ⊥, effect: none
// eff265278 -- static: no, type: ⊥, effect: ctl
// left266273 -- static: no, type: i32, effect: none
// right267274 -- static: yes, type: i32, effect: none
// depth269 -- static: yes, type: u32, effect: ctl
// rtcast279 -- static: no, type: i32, effect: none
// TypeVar.I32.not_equals -- static: no, type: i32, effect: none
// arg268270 -- static: yes, type: u32, effect: none
// cond272 -- static: no, type: i32, effect: pop
// label271 -- static: yes, type: ⊥, effect: none

	def depth269 = readImmULEB32();
	def label271 = f_getLabel(depth269);
	def cond272 = pop_i32();
	def eff263277 = doBranch(label271);
	def eff265278 = doFallThru();
}
// st bitset: 0
def BLOCK() {
	// arg281283 -- static: no, type: ⊥, effect: none
// bt282 -- static: no, type: ⊥, effect: ctl
// eff280284 -- static: no, type: ⊥, effect: ctl

	def bt282 = readImmBlockType();
	def eff280284 = doBlock(bt282);
}
// st bitset: 0
def LOOP() {
	// arg286288 -- static: no, type: ⊥, effect: none
// bt287 -- static: no, type: ⊥, effect: ctl
// eff285289 -- static: no, type: ⊥, effect: ctl

	def bt287 = readImmBlockType();
	def eff285289 = doLoop(bt287);
}
// st bitset: 0
def TRY() {
	// arg291293 -- static: no, type: ⊥, effect: none
// bt292 -- static: no, type: ⊥, effect: ctl
// eff290294 -- static: no, type: ⊥, effect: none

	def bt292 = readImmBlockType();
}
// st bitset: 0
def IF() {
	// eff296310 -- static: no, type: ⊥, effect: ctl
// bt302 -- static: no, type: ⊥, effect: ctl
// eff298311 -- static: no, type: ⊥, effect: ctl
// cond303 -- static: no, type: i32, effect: pop
// label305 -- static: yes, type: ⊥, effect: none
// rtcast312 -- static: no, type: i32, effect: none
// cond295308 -- static: no, type: ⊥, effect: none
// arg297309 -- static: yes, type: ⊥, effect: none
// left299306 -- static: no, type: i32, effect: none
// right300307 -- static: yes, type: i32, effect: none
// TypeVar.I32.equals -- static: no, type: i32, effect: none
// arg301304 -- static: yes, type: ⊥, effect: none

	def bt302 = readImmBlockType();
	def cond303 = pop_i32();
	def arg301304 : u32 = 0;
	def label305 = f_getLabel(arg301304);
	def eff296310 = doBranch(label305);
	def eff298311 = doFallThru();
}
// st bitset: 0
def ELSE() {
	// arg315316 -- static: yes, type: ⊥, effect: none
// label317 -- static: yes, type: ⊥, effect: none
// eff313319 -- static: no, type: ⊥, effect: ctl
// arg314318 -- static: yes, type: ⊥, effect: none

	def arg315316 : u32 = 0;
	def label317 = f_getLabel(arg315316);
	def eff313319 = doBranch(label317);
}
// st bitset: 0
def END() {
	// eff322323 -- static: no, type: ⊥, effect: ctl
// cond320324 -- static: no, type: ⊥, effect: none
// eff321325 -- static: no, type: ⊥, effect: ctl

	def eff322323 = doEnd();
	def eff321325 = doReturn();
}
def build_dispatch_table() -> Array<void -> void> {
  DISPATCH_TABLE = Array.new(0xE5 + 1);
  DISPATCH_TABLE[Opcode.UNREACHABLE.code] = UNREACHABLE;
  DISPATCH_TABLE[Opcode.LOCAL_GET.code] = LOCAL_GET;
  DISPATCH_TABLE[Opcode.LOCAL_SET.code] = LOCAL_SET;
  DISPATCH_TABLE[Opcode.LOCAL_TEE.code] = LOCAL_TEE;
  DISPATCH_TABLE[Opcode.GLOBAL_GET.code] = GLOBAL_GET;
  DISPATCH_TABLE[Opcode.GLOBAL_SET.code] = GLOBAL_SET;
  DISPATCH_TABLE[Opcode.TABLE_GET.code] = TABLE_GET;
  DISPATCH_TABLE[Opcode.TABLE_SET.code] = TABLE_SET;
  DISPATCH_TABLE[Opcode.CALL.code] = CALL;
  DISPATCH_TABLE[Opcode.CALL_INDIRECT.code] = CALL_INDIRECT;
  DISPATCH_TABLE[Opcode.I32_CONST.code] = I32_CONST;
  DISPATCH_TABLE[Opcode.I32_ADD.code] = I32_ADD;
  DISPATCH_TABLE[Opcode.I32_SUB.code] = I32_SUB;
  DISPATCH_TABLE[Opcode.I32_EQZ.code] = I32_EQZ;
  DISPATCH_TABLE[Opcode.F32_MAX.code] = F32_MAX;
  DISPATCH_TABLE[Opcode.BR.code] = BR;
  DISPATCH_TABLE[Opcode.BR_IF.code] = BR_IF;
  DISPATCH_TABLE[Opcode.BLOCK.code] = BLOCK;
  DISPATCH_TABLE[Opcode.LOOP.code] = LOOP;
  DISPATCH_TABLE[Opcode.TRY.code] = TRY;
  DISPATCH_TABLE[Opcode.IF.code] = IF;
  DISPATCH_TABLE[Opcode.ELSE.code] = ELSE;
  DISPATCH_TABLE[Opcode.END.code] = END;
  return DISPATCH_TABLE;
}
class STBuilder {
    var target: int;
    var label: int;
}
type STEntry {
    case Target(
        target: int
    );
    case Label(
        label: int
    );
}

var codeptr: CodePtr;
var DISPATCH_TABLE: Array<void -> void> = build_dispatch_table();
var local_types: Vector<TypeVar>;
var stack: ArrayStack<TypeVar>;

// this is mainly to lift sidetable vars out of conditionals,
// probably a lot of ways to dodge that
var st_builder: STBuilder = STBuilder.new();
var st_entries: Vector<STEntry> = Vector.new();
var st_controls: Vector<int> = Vector.new(); // ctl idx of target

def assert(b: bool) {
    if (!b) {
        System.puts("assert fail :(\n");
	return [][1];
    }
}

type CtlEntry {
	case Block(end_pc: int, cont_stp: int);
	case Loop(start_pc: int, end_pc: int, cont_stp: int);
        case None;
}
var ctls: Array<CtlEntry>;
var ctl_stack: ArrayStack<int>;

// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: u64, high: u64);
type Label(depth: u32);
// class Object { }
type TypeVar {
    case I32 {
        def plus(lhs: TypeVar.I32, rhs: TypeVar.I32) -> TypeVar.I32 { return TypeVar.I32; }
        def minus(lhs: TypeVar.I32, rhs: TypeVar.I32) -> TypeVar.I32 { return TypeVar.I32; }
        def equals(lhs: TypeVar.I32, rhs: TypeVar.I32) -> TypeVar.I32 { return TypeVar.I32; }
    }
    case U32;
    case U64;
    case F32 {
    }
    case Err;
}
def rtcast_i32(x: i32) -> TypeVar.I32 {
    return TypeVar.I32;
}
type FieldOffset;
class Signature { }
// class Function { }

enum FieldKind {
	U8, U16, I32, I64, F32, F64, V128, REF
}

def readImmULEB32() -> u32 {
    return codeptr.read_uleb32();
}

def readImmILEB32() -> i32 {
    return i32.!(codeptr.read_uleb32());
}

def readImmULEB64() -> u64 {
    return codeptr.read_uleb64();
}

def readImmILEB64() -> i64 {
    return i64.!(codeptr.read_uleb64());
}

def readImmU8() -> u8 {
    return codeptr.read1();
}

def readImmBlockType() -> () {
    def bt = codeptr.read_BlockTypeCode();
    return ();
}

def pop_i32() -> TypeVar.I32 {
    match (stack.pop()) {
        I32 => return TypeVar.I32;
        _ => {
	    assert(false);
	    return TypeVar.I32;
	}
    }
}
def pop_u32() -> TypeVar.U32 {
    match (stack.pop()) {
        U32 => return TypeVar.U32;
        _ => {
	    assert(false);
	    return TypeVar.U32;
	}
    }
}
def pop_i64() -> i64;
def pop_u64() -> TypeVar.U64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> TypeVar {
    assert(tv == stack.pop());
    return tv;
}

def push_i32(v: TypeVar.I32) {
    stack.push(v);
}
def push_u32(v: u32) {
    stack.push(TypeVar.U32);
}
def trueVal() -> TypeVar.I32 {
    return TypeVar.I32;
}
def falseVal() -> TypeVar.I32 {
    return TypeVar.I32;
}
def i32_eqz(x: TypeVar.I32) -> TypeVar.I32 {
    return TypeVar.I32;
}
def push_i64(v: i64);
def push_u64(v: u64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: TypeVar) {
    // TODO: assert v has tv
    stack.push(tv);
}

// Local variables.
def getLocal(tv: TypeVar, index: u32) -> TypeVar {
    return stack.elems[index];
}
def setLocal(tv: TypeVar, index: u32, v: TypeVar) {
    // TODO: assert that v has tv
    stack.elems[index] = tv;
}

// Global variables.
def getGlobal(tv: TypeVar, index: u32) -> TypeVar;
def setGlobal(tv: TypeVar, index: u32, v: TypeVar);

// Function context.
def f_getLabel(depth: u32) -> int {
    return int.!(depth);
}

def f_getLocalType(index: u32) -> TypeVar {
    return local_types[int.!(index)];
}

// Module context.
def m_getGlobalType(index: u32) -> TypeVar;
def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;
def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;
def m_isMemory64(memory_index: u32) -> bool;
def m_isTable64(memory_index: u32) -> bool;
def m_getFuncSignature(func_index: u32) -> Signature;
def m_getSignature(sig_index: u32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: u32, sig: Signature, func_index: TypeVar.U64) -> Function;
def i_getTableFunction32(table_index: u32, sig: Signature, func_index: TypeVar.U32) -> Function;
def i_getFunction(func_index: u32) -> Function;

// Control flow.
def doCall(sig: Signature, target: Function);

def doBranch(label: int) {
    def ctl_idx = ctl_stack.elems[ctl_stack.top - 1 - label];
    st_controls.put(ctl_idx);
}

def doFallThru() {
}

// Machine intrinsics.
def mach_readStructField_i8(obj: Object, offset: FieldOffset) -> i8;
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_i16(obj: Object, offset: FieldOffset) -> i16;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;
def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;
def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;

def mach_readTable64(table_index: u32, index: TypeVar.U64) -> Object;
def mach_readTable32(table_index: u32, index: TypeVar.U32) -> Object;

def mach_writeTable64(table_index: u32, index: TypeVar.U64, val: Object);
def mach_writeTable32(table_index: u32, index: TypeVar.U32, val: Object);

// Traps.
def invalid();
def trapNull();
def trapUnreachable();

def doBlock(bt: ()) {
    if (ctls[codeptr.pos] == CtlEntry.None) ctls[codeptr.pos] = CtlEntry.Block(-1, -1);
    ctl_stack.push(codeptr.pos);
}

def doLoop(bt: ()) {
    if (ctls[codeptr.pos] == CtlEntry.None) ctls[codeptr.pos] = CtlEntry.Loop(codeptr.pos, -1, st_entries.length);
    ctl_stack.push(codeptr.pos);
}

def doEnd() {
    def ctl_idx = ctl_stack.pop();
    match (ctls[ctl_idx]) {
        Block(end_pc, cont_stp) =>
	    if (end_pc == -1) ctls[ctl_idx] = CtlEntry.Block(codeptr.pos, st_entries.length - 1);
        Loop(start_pc, end_pc, cont_stp) => 
	    if (end_pc == -1) ctls[ctl_idx] = CtlEntry.Loop(start_pc, codeptr.pos, cont_stp);
        None => doReturn();
    }
}

def doReturn() {
    return;
}

def doTry(bt: ()) {
    return;
}

def f_isAtEnd() -> bool {
    return codeptr.pos >= codeptr.data.length;
}

def push_locals(count: u32, vtc: ValueTypeCode) {
    System.puts("push\n");
    var tv: TypeVar;
    match (vtc.code) {
        BpTypeCode.I32.val => tv = TypeVar.I32;
        _ => tv = TypeVar.I32; // TODO
    }
    
    for (i < count) local_types.put(tv);
}

component Validator {
    def init(code: Array<byte>, args: Array<TypeVar>, ret: Array<TypeVar>) {
        codeptr = CodePtr.new(code);
        local_types = Vector.new();
        stack = ArrayStack.new();

        ctls = Array.new(code.length);
        for (i < code.length) ctls[i] = CtlEntry.None;
        ctl_stack = ArrayStack.new();

        for (a in args) local_types.put(TypeVar.I32);
        for (a in args) stack.push(a);
    }

    def dispatch() {
        codeptr.iterate_local_codes(push_locals);
        while (codeptr.pos < codeptr.data.length) {
            def op = codeptr.read_opcode();
            System.puts(op.mnemonic);
            System.ln();
            DISPATCH_TABLE[op.code]();
        }
    }

    // for other sidetable entries, do we need a post processing phase?
    def build_sidetable() -> (Vector<STEntry>, Vector<(int, int)>) {
        def reified_st_controls = Vector<(int, int)>.new();
        for (i < st_controls.length) {
            def target_ctl = ctls[st_controls[i]];
            var target_stp = -1;
            var target_pc = -1;
            match (target_ctl) {
                Block(epc, cstp) => {
                    target_pc = epc;
                    target_stp = cstp;
                }
                Loop(spc, epc, cstp) => {
                    target_pc = spc;
                    target_stp = cstp;
                }
                None => invalid();
            }
            reified_st_controls.put(target_pc, target_stp);
        }
        return (st_entries, reified_st_controls);
    }
}
